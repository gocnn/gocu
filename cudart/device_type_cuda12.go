// Code generated by generator.go; DO NOT EDIT.
//go:build cuda12
// +build cuda12

package cudart

/*
#include <cuda_runtime.h>
*/
import (
	"C"
	"github.com/google/uuid"
	"unsafe"
)

// DeviceProperties holds properties of a CUDA device.
type DeviceProperties struct {
	Eccenabled                             int       // int
	AccessPolicyMaxWindowSize              int       // int
	AsyncEngineCount                       int       // int
	CanMapHostMemory                       int       // int
	CanUseHostPointerForRegisteredMem      int       // int
	ClockRate                              int       // int
	ClusterLaunch                          int       // int
	ComputeMode                            int       // int
	ComputePreemptionSupported             int       // int
	ConcurrentKernels                      int       // int
	ConcurrentManagedAccess                int       // int
	CooperativeLaunch                      int       // int
	CooperativeMultiDeviceLaunch           int       // int
	DeferredMappingCudaArraySupported      int       // int
	DeviceOverlap                          int       // int
	DirectManagedMemAccessFromHost         int       // int
	GlobalL1CacheSupported                 int       // int
	GpuDirectRdmaflushWritesOptions        uint32    // unsigned int
	GpuDirectRdmasupported                 int       // int
	GpuDirectRdmawritesOrdering            int       // int
	HostNativeAtomicSupported              int       // int
	HostRegisterReadOnlySupported          int       // int
	HostRegisterSupported                  int       // int
	Integrated                             int       // int
	IpcEventSupported                      int       // int
	IsMultiGpuBoard                        int       // int
	KernelExecTimeoutEnabled               int       // int
	L2CacheSize                            int       // int
	LocalL1CacheSupported                  int       // int
	Luid                                   string    // char[8]
	LuidDeviceNodeMask                     uint32    // unsigned int
	Major                                  int       // int
	ManagedMemory                          int       // int
	MaxBlocksPerMultiProcessor             int       // int
	MaxGridSize                            []int     // int[3]
	MaxSurface1D                           int       // int
	MaxSurface1Dlayered                    []int     // int[2]
	MaxSurface2D                           []int     // int[2]
	MaxSurface2Dlayered                    []int     // int[3]
	MaxSurface3D                           []int     // int[3]
	MaxSurfaceCubemap                      int       // int
	MaxSurfaceCubemapLayered               []int     // int[2]
	MaxTexture1D                           int       // int
	MaxTexture1Dlayered                    []int     // int[2]
	MaxTexture1Dlinear                     int       // int
	MaxTexture1Dmipmap                     int       // int
	MaxTexture2D                           []int     // int[2]
	MaxTexture2Dgather                     []int     // int[2]
	MaxTexture2Dlayered                    []int     // int[3]
	MaxTexture2Dlinear                     []int     // int[3]
	MaxTexture2Dmipmap                     []int     // int[2]
	MaxTexture3D                           []int     // int[3]
	MaxTexture3Dalt                        []int     // int[3]
	MaxTextureCubemap                      int       // int
	MaxTextureCubemapLayered               []int     // int[2]
	MaxThreadsDim                          []int     // int[3]
	MaxThreadsPerBlock                     int       // int
	MaxThreadsPerMultiProcessor            int       // int
	MemPitch                               uint64    // size_t
	MemoryBusWidth                         int       // int
	MemoryClockRate                        int       // int
	MemoryPoolSupportedHandleTypes         uint32    // unsigned int
	MemoryPoolsSupported                   int       // int
	Minor                                  int       // int
	MultiGpuBoardGroupId                   int       // int
	MultiProcessorCount                    int       // int
	Name                                   string    // char[256]
	PageableMemoryAccess                   int       // int
	PageableMemoryAccessUsesHostPageTables int       // int
	PciBusId                               int       // int
	PciDeviceId                            int       // int
	PciDomainId                            int       // int
	PersistingL2CacheMaxSize               int       // int
	RegsPerBlock                           int       // int
	RegsPerMultiprocessor                  int       // int
	Reserved                               []int     // int[63]
	ReservedSharedMemPerBlock              uint64    // size_t
	SharedMemPerBlock                      uint64    // size_t
	SharedMemPerBlockOptin                 uint64    // size_t
	SharedMemPerMultiprocessor             uint64    // size_t
	SingleToDoublePrecisionPerfRatio       int       // int
	SparseCudaArraySupported               int       // int
	StreamPrioritiesSupported              int       // int
	SurfaceAlignment                       uint64    // size_t
	TccDriver                              int       // int
	TextureAlignment                       uint64    // size_t
	TexturePitchAlignment                  uint64    // size_t
	TimelineSemaphoreInteropSupported      int       // int
	TotalConstMem                          uint64    // size_t
	TotalGlobalMem                         uint64    // size_t
	UnifiedAddressing                      int       // int
	UnifiedFunctionPointers                int       // int
	Uuid                                   uuid.UUID // cudaUUID_t
	WarpSize                               int       // int
}

// fromC converts a C.cudaDeviceProp to a Go DeviceProperties.
func (p *DeviceProperties) fromC(prop *C.struct_cudaDeviceProp) {
	p.Eccenabled = int(prop.ECCEnabled)
	p.AccessPolicyMaxWindowSize = int(prop.accessPolicyMaxWindowSize)
	p.AsyncEngineCount = int(prop.asyncEngineCount)
	p.CanMapHostMemory = int(prop.canMapHostMemory)
	p.CanUseHostPointerForRegisteredMem = int(prop.canUseHostPointerForRegisteredMem)
	p.ClockRate = int(prop.clockRate)
	p.ClusterLaunch = int(prop.clusterLaunch)
	p.ComputeMode = int(prop.computeMode)
	p.ComputePreemptionSupported = int(prop.computePreemptionSupported)
	p.ConcurrentKernels = int(prop.concurrentKernels)
	p.ConcurrentManagedAccess = int(prop.concurrentManagedAccess)
	p.CooperativeLaunch = int(prop.cooperativeLaunch)
	p.CooperativeMultiDeviceLaunch = int(prop.cooperativeMultiDeviceLaunch)
	p.DeferredMappingCudaArraySupported = int(prop.deferredMappingCudaArraySupported)
	p.DeviceOverlap = int(prop.deviceOverlap)
	p.DirectManagedMemAccessFromHost = int(prop.directManagedMemAccessFromHost)
	p.GlobalL1CacheSupported = int(prop.globalL1CacheSupported)
	p.GpuDirectRdmaflushWritesOptions = uint32(prop.gpuDirectRDMAFlushWritesOptions)
	p.GpuDirectRdmasupported = int(prop.gpuDirectRDMASupported)
	p.GpuDirectRdmawritesOrdering = int(prop.gpuDirectRDMAWritesOrdering)
	p.HostNativeAtomicSupported = int(prop.hostNativeAtomicSupported)
	p.HostRegisterReadOnlySupported = int(prop.hostRegisterReadOnlySupported)
	p.HostRegisterSupported = int(prop.hostRegisterSupported)
	p.Integrated = int(prop.integrated)
	p.IpcEventSupported = int(prop.ipcEventSupported)
	p.IsMultiGpuBoard = int(prop.isMultiGpuBoard)
	p.KernelExecTimeoutEnabled = int(prop.kernelExecTimeoutEnabled)
	p.L2CacheSize = int(prop.l2CacheSize)
	p.LocalL1CacheSupported = int(prop.localL1CacheSupported)
	p.Luid = C.GoString(&prop.luid[0])
	p.LuidDeviceNodeMask = uint32(prop.luidDeviceNodeMask)
	p.Major = int(prop.major)
	p.ManagedMemory = int(prop.managedMemory)
	p.MaxBlocksPerMultiProcessor = int(prop.maxBlocksPerMultiProcessor)
	p.MaxGridSize = intSlice(&prop.maxGridSize[0], 3)
	p.MaxSurface1D = int(prop.maxSurface1D)
	p.MaxSurface1Dlayered = intSlice(&prop.maxSurface1DLayered[0], 2)
	p.MaxSurface2D = intSlice(&prop.maxSurface2D[0], 2)
	p.MaxSurface2Dlayered = intSlice(&prop.maxSurface2DLayered[0], 3)
	p.MaxSurface3D = intSlice(&prop.maxSurface3D[0], 3)
	p.MaxSurfaceCubemap = int(prop.maxSurfaceCubemap)
	p.MaxSurfaceCubemapLayered = intSlice(&prop.maxSurfaceCubemapLayered[0], 2)
	p.MaxTexture1D = int(prop.maxTexture1D)
	p.MaxTexture1Dlayered = intSlice(&prop.maxTexture1DLayered[0], 2)
	p.MaxTexture1Dlinear = int(prop.maxTexture1DLinear)
	p.MaxTexture1Dmipmap = int(prop.maxTexture1DMipmap)
	p.MaxTexture2D = intSlice(&prop.maxTexture2D[0], 2)
	p.MaxTexture2Dgather = intSlice(&prop.maxTexture2DGather[0], 2)
	p.MaxTexture2Dlayered = intSlice(&prop.maxTexture2DLayered[0], 3)
	p.MaxTexture2Dlinear = intSlice(&prop.maxTexture2DLinear[0], 3)
	p.MaxTexture2Dmipmap = intSlice(&prop.maxTexture2DMipmap[0], 2)
	p.MaxTexture3D = intSlice(&prop.maxTexture3D[0], 3)
	p.MaxTexture3Dalt = intSlice(&prop.maxTexture3DAlt[0], 3)
	p.MaxTextureCubemap = int(prop.maxTextureCubemap)
	p.MaxTextureCubemapLayered = intSlice(&prop.maxTextureCubemapLayered[0], 2)
	p.MaxThreadsDim = intSlice(&prop.maxThreadsDim[0], 3)
	p.MaxThreadsPerBlock = int(prop.maxThreadsPerBlock)
	p.MaxThreadsPerMultiProcessor = int(prop.maxThreadsPerMultiProcessor)
	p.MemPitch = uint64(prop.memPitch)
	p.MemoryBusWidth = int(prop.memoryBusWidth)
	p.MemoryClockRate = int(prop.memoryClockRate)
	p.MemoryPoolSupportedHandleTypes = uint32(prop.memoryPoolSupportedHandleTypes)
	p.MemoryPoolsSupported = int(prop.memoryPoolsSupported)
	p.Minor = int(prop.minor)
	p.MultiGpuBoardGroupId = int(prop.multiGpuBoardGroupID)
	p.MultiProcessorCount = int(prop.multiProcessorCount)
	p.Name = C.GoString(&prop.name[0])
	p.PageableMemoryAccess = int(prop.pageableMemoryAccess)
	p.PageableMemoryAccessUsesHostPageTables = int(prop.pageableMemoryAccessUsesHostPageTables)
	p.PciBusId = int(prop.pciBusID)
	p.PciDeviceId = int(prop.pciDeviceID)
	p.PciDomainId = int(prop.pciDomainID)
	p.PersistingL2CacheMaxSize = int(prop.persistingL2CacheMaxSize)
	p.RegsPerBlock = int(prop.regsPerBlock)
	p.RegsPerMultiprocessor = int(prop.regsPerMultiprocessor)
	p.Reserved = intSlice(&prop.reserved[0], 63)
	p.ReservedSharedMemPerBlock = uint64(prop.reservedSharedMemPerBlock)
	p.SharedMemPerBlock = uint64(prop.sharedMemPerBlock)
	p.SharedMemPerBlockOptin = uint64(prop.sharedMemPerBlockOptin)
	p.SharedMemPerMultiprocessor = uint64(prop.sharedMemPerMultiprocessor)
	p.SingleToDoublePrecisionPerfRatio = int(prop.singleToDoublePrecisionPerfRatio)
	p.SparseCudaArraySupported = int(prop.sparseCudaArraySupported)
	p.StreamPrioritiesSupported = int(prop.streamPrioritiesSupported)
	p.SurfaceAlignment = uint64(prop.surfaceAlignment)
	p.TccDriver = int(prop.tccDriver)
	p.TextureAlignment = uint64(prop.textureAlignment)
	p.TexturePitchAlignment = uint64(prop.texturePitchAlignment)
	p.TimelineSemaphoreInteropSupported = int(prop.timelineSemaphoreInteropSupported)
	p.TotalConstMem = uint64(prop.totalConstMem)
	p.TotalGlobalMem = uint64(prop.totalGlobalMem)
	p.UnifiedAddressing = int(prop.unifiedAddressing)
	p.UnifiedFunctionPointers = int(prop.unifiedFunctionPointers)
	p.Uuid = *(*uuid.UUID)(unsafe.Pointer(&prop.uuid))
	p.WarpSize = int(prop.warpSize)
}

// intSlice converts a C int array to a Go []int slice.
func intSlice(ptr *C.int, size int) []int {
	slice := make([]int, size)
	for i := range slice {
		slice[i] = int(*(*C.int)(unsafe.Pointer(uintptr(unsafe.Pointer(ptr)) + uintptr(i)*unsafe.Sizeof(*ptr))))
	}
	return slice
}

// uint64Slice converts a C size_t array to a Go []uint64 slice.
func uint64Slice(ptr *C.size_t, size int) []uint64 {
	slice := make([]uint64, size)
	for i := range slice {
		slice[i] = uint64(*(*C.size_t)(unsafe.Pointer(uintptr(unsafe.Pointer(ptr)) + uintptr(i)*unsafe.Sizeof(*ptr))))
	}
	return slice
}
