// Code generated by generator.go; DO NOT EDIT.

{{- if .BuildTag }}
// +build {{ .BuildTag }}
{{- end }}

package {{ .Package }}

/*
#include <cuda_runtime.h>
*/
import (
	"C"
	"unsafe"


{{- if hasUUID .Fields }}
	"github.com/google/uuid"
{{- end }}
)

// {{ .StructName }} holds properties of a CUDA device.
type {{ .StructName }} struct {
{{- range .Fields }}
	{{ .GoName }} {{ .GoType }} // {{ .CType }}
{{- end }}
}

// fromC converts a C.cudaDeviceProp to a Go {{ .StructName }}.
func (p *{{ .StructName }}) fromC(prop *C.struct_cudaDeviceProp) {
{{- range .Fields }}
	p.{{ .GoName }} = {{ .FromCExpr }}
{{- end }}
}

// intSlice converts a C int array to a Go []int slice.
func intSlice(ptr *C.int, size int) []int {
	slice := make([]int, size)
	for i := range slice {
		slice[i] = int(*(*C.int)(unsafe.Pointer(uintptr(unsafe.Pointer(ptr)) + uintptr(i)*unsafe.Sizeof(*ptr))))
	}
	return slice
}

// uint64Slice converts a C size_t array to a Go []uint64 slice.
func uint64Slice(ptr *C.size_t, size int) []uint64 {
	slice := make([]uint64, size)
	for i := range slice {
		slice[i] = uint64(*(*C.size_t)(unsafe.Pointer(uintptr(unsafe.Pointer(ptr)) + uintptr(i)*unsafe.Sizeof(*ptr))))
	}
	return slice
}
